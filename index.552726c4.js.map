{"mappings":"A,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,ECKO,OAAM,EACX,YAAY,CAAI,CAAE,CAAQ,CAAE,CAC1B,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,KAAK,CAAG,GAAG,UAAU,CAAC,SAC3B,IAAI,CAAC,WAAW,AAClB,CAGA,MAAM,QAAQ,CAAO,CAAE,CAErB,IAAM,EAAM,IAAI,KACV,EAAO,CACX,QAAS,EACT,SAAU,IAAI,CAAC,QAAQ,CACvB,KAAM,IAAI,CAAC,IAAI,CACf,WAAY,SAAS,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,EACpD,EAIA,OADiB,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAExC,CAGA,SAAS,CAAQ,CAAE,CACjB,IAAI,CAAC,WAAW,CAAG,IAAI,CAAC,KAAK,CAC1B,KAAK,CAAC,OAAQ,KAAM,IAAI,CAAC,IAAI,EAC7B,OAAO,CAAC,cACR,UAAU,CAAC,AAAA,IACV,EAAS,UAAU,GAAG,OAAO,CAAC,AAAA,IACV,UAAd,EAAK,IAAI,EAEX,EAAS,EAAK,GAAG,CAAC,IAAI,GAE1B,EACF,EACJ,CAGA,WAAW,CAAQ,CAAE,CACnB,IAAI,CAAC,QAAQ,CAAG,EAChB,aAAa,OAAO,CAAC,WAAY,EACnC,CAGA,WAAW,CAAI,CAAE,CACf,IAAI,CAAC,IAAI,CAAG,EACZ,QAAQ,GAAG,CAAC,iBACR,IAAI,CAAC,WAAW,EAClB,IAAI,CAAC,WAAW,EAEpB,CACF,C,G,E","sources":["<anon>","src/scripts/chat.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire8bbc\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire8bbc\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"XBdqf\", function(module, exports) {\n\n$parcel$export(module.exports, \"Chatroom\", function () { return $0b3261060f96e267$export$36c561943c90300b; });\n// TODO adding new chat documents\n// TODO setting up a real-time listener to get new chats\n// TODO updating the username\n// TODO updating the room\nclass $0b3261060f96e267$export$36c561943c90300b {\n    constructor(room, username){\n        this.room = room;\n        this.username = username;\n        this.chats = db.collection(\"chats\");\n        this.unsubscribe;\n    }\n    //*   metoda addChat (adauga un mesaj):\n    async addChat(message) {\n        //* format a chat object:\n        const now = new Date();\n        const chat = {\n            message: message,\n            username: this.username,\n            room: this.room,\n            created_at: firebase.firestore.Timestamp.fromDate(now)\n        };\n        //* save the chat document:\n        const response = await this.chats.add(chat);\n        return response;\n    }\n    //* metoda getChats (actualizeaza in timp real mesajele):\n    getChats(callback) {\n        this.unsubscribe = this.chats.where(\"room\", \"==\", this.room).orderBy(\"created_at\").onSnapshot((snapshot)=>{\n            snapshot.docChanges().forEach((elem)=>{\n                if (elem.type === \"added\") //* update the UI:\n                callback(elem.doc.data());\n            });\n        });\n    }\n    //*   metoda update username:\n    updateName(username) {\n        this.username = username;\n        localStorage.setItem(\"username\", username);\n    }\n    //*   update the chatroom:\n    updateRoom(room) {\n        this.room = room;\n        console.log(\"room updated!\");\n        if (this.unsubscribe) this.unsubscribe();\n    }\n}\n\n});\n\n\nparcelRequire(\"XBdqf\");\n\n//# sourceMappingURL=index.552726c4.js.map\n","// TODO adding new chat documents\n// TODO setting up a real-time listener to get new chats\n// TODO updating the username\n// TODO updating the room\n\nexport class Chatroom {\n  constructor(room, username) {\n    this.room = room;\n    this.username = username;\n    this.chats = db.collection('chats');\n    this.unsubscribe;\n  }\n\n  //*   metoda addChat (adauga un mesaj):\n  async addChat(message) {\n    //* format a chat object:\n    const now = new Date();\n    const chat = {\n      message: message,\n      username: this.username,\n      room: this.room,\n      created_at: firebase.firestore.Timestamp.fromDate(now), // Setăm data curentă.\n    };\n\n    //* save the chat document:\n    const response = await this.chats.add(chat);\n    return response;\n  }\n\n  //* metoda getChats (actualizeaza in timp real mesajele):\n  getChats(callback) {\n    this.unsubscribe = this.chats\n      .where('room', '==', this.room)\n      .orderBy('created_at')\n      .onSnapshot(snapshot => {\n        snapshot.docChanges().forEach(elem => {\n          if (elem.type === 'added') {\n            //* update the UI:\n            callback(elem.doc.data());\n          }\n        });\n      });\n  }\n\n  //*   metoda update username:\n  updateName(username) {\n    this.username = username;\n    localStorage.setItem('username', username);\n  }\n\n  //*   update the chatroom:\n  updateRoom(room) {\n    this.room = room;\n    console.log('room updated!');\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n}\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$0b3261060f96e267$export$36c561943c90300b","set","s","enumerable","configurable","constructor","room","username","chats","db","collection","unsubscribe","addChat","message","now","Date","chat","created_at","firebase","firestore","Timestamp","fromDate","add","getChats","callback","where","orderBy","onSnapshot","snapshot","docChanges","forEach","elem","type","doc","data","updateName","localStorage","setItem","updateRoom","console","log"],"version":3,"file":"index.552726c4.js.map"}